# Generated by Django 5.0.6 on 2024-06-08 04:53

import base.validators
import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Batch',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('batch_year', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='SubTests',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subTestName', models.CharField(max_length=20)),
                ('subTestDescription', models.CharField(default='Assignment Details published', max_length=200)),
                ('subTestDeadline', models.DateField()),
                ('maxMarks', models.FloatField(default=100)),
                ('passingMarks', models.FloatField(default=50)),
            ],
            options={
                'ordering': ['subTestDeadline', 'subTestName'],
            },
        ),
        migrations.CreateModel(
            name='Topic',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('General', 'General'), ('Drive', 'Drive'), ('Training - Aptitude', 'Training - Aptitude'), ('Training - Soft Skills', 'Training - Soft Skills'), ('Training - Java', 'Training - Java'), ('Training - Python', 'Training - Python'), ('Training - Core TYL', 'Training - Core TYL')], max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('name', models.CharField(max_length=20)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('avatar', models.ImageField(default='avatar.svg', null=True, upload_to='')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='ChatRoom',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('batch', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.batch')),
                ('host', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('participants', models.ManyToManyField(blank=True, related_name='participants', to=settings.AUTH_USER_MODEL)),
                ('topic', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='base.topic')),
            ],
            options={
                'ordering': ['-updated', '-created'],
            },
        ),
        migrations.CreateModel(
            name='Drives',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('companyName', models.CharField(max_length=200)),
                ('role', models.CharField(max_length=500)),
                ('requirements', models.CharField(max_length=500)),
                ('job_description', models.FileField(upload_to='')),
                ('min_cgpa', models.FloatField(default=0)),
                ('aptitude_level', models.IntegerField()),
                ('programming_level', models.IntegerField()),
                ('core_level', models.IntegerField()),
                ('softskills_level', models.IntegerField(default=0)),
                ('language_level', models.IntegerField(default=0)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('batch', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.batch')),
                ('driveChat', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.chatroom')),
                ('placement_officer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message', models.TextField()),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('room', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.chatroom')),
                ('sender', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Students',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('branch', models.CharField(max_length=200)),
                ('usn', models.CharField(max_length=20, null=True, validators=[base.validators.validate_usn])),
                ('aptitudeLevel', models.IntegerField(default=0)),
                ('languageLevel', models.IntegerField(default=0)),
                ('programmingLevel', models.IntegerField(default=0)),
                ('coreLevel', models.IntegerField(default=0)),
                ('softskillsLevel', models.IntegerField(default=0)),
                ('placedCount', models.IntegerField(default=0)),
                ('batch', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.batch')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='SPF',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mobileNumberForCalling', models.CharField(max_length=10)),
                ('mobileNumberForWhatsapp', models.CharField(max_length=10)),
                ('degree', models.CharField(choices=[('BE', 'BE'), ('MCA', 'MCA'), ('MBA', 'MBA')], default='BE', max_length=3)),
                ('typeOfEntry', models.CharField(choices=[('Regular', 'Regular'), ('Lateral', 'Lateral')], default='Regular', max_length=10)),
                ('gender', models.CharField(choices=[('Male', 'Male'), ('Female', 'Female')], max_length=6)),
                ('dateOfBirth', models.DateField()),
                ('personalEmailId', models.EmailField(max_length=254)),
                ('mentorName', models.CharField(max_length=20)),
                ('mentorDept', models.CharField(choices=[('Basic Science', 'Basic Science'), ('Placement', 'Placement'), ('CSE', 'CSE'), ('ISE', 'ISE'), ('ECE', 'ECE'), ('EEE', 'EEE'), ('MECH', 'MECH'), ('CIV', 'CIV'), ('MCA', 'MCA'), ('MBA', 'MBA')], max_length=13)),
                ('mentorMobileNumber', models.CharField(max_length=10)),
                ('parentsMobileNumber', models.CharField(max_length=10)),
                ('communicationAddress', models.TextField()),
                ('permanentAddress', models.TextField()),
                ('tenthMarks', models.FloatField()),
                ('tenthYearOfPassing', models.CharField(max_length=4)),
                ('twelfthMarks', models.FloatField(blank=True, default=0, null=True)),
                ('twelfthYearOfPassing', models.CharField(blank=True, default=0, max_length=4, null=True)),
                ('diplomaMarks', models.FloatField(blank=True, default=0, null=True)),
                ('diplomaYearOfPassing', models.CharField(blank=True, default=0, max_length=4, null=True)),
                ('ugOrPg', models.CharField(choices=[('UG', 'UG'), ('PG', 'PG')], default='UG', max_length=2)),
                ('degreeCgpa', models.FloatField()),
                ('currentBacklogs', models.IntegerField(default=0)),
                ('backlogHistory', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], default='No', max_length=3)),
                ('yearBack', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], default='No', max_length=3)),
                ('numberOfYearGapsInAcademics', models.IntegerField(default=0)),
                ('numberofYearGapsInDegree', models.IntegerField(default=0)),
                ('validation', models.CharField(choices=[('Approved', 'Approved'), ('Pending', 'Pending'), ('Rejected', 'Rejected')], default='Pending', max_length=10)),
                ('comments', models.TextField(default='No comments')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.students')),
            ],
        ),
        migrations.CreateModel(
            name='PlacedStudents',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('offer_letter', models.FileField(default=None, upload_to='')),
                ('drive', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.drives')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.students')),
            ],
        ),
        migrations.CreateModel(
            name='KYC',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('resume', models.FileField(blank=True, null=True, upload_to='')),
                ('videoResume', models.FileField(blank=True, null=True, upload_to='')),
                ('collegeIdCard', models.FileField(blank=True, null=True, upload_to='')),
                ('passportSizePhoto', models.FileField(blank=True, null=True, upload_to='')),
                ('panCard', models.FileField(blank=True, null=True, upload_to='')),
                ('aadharCard', models.FileField(blank=True, null=True, upload_to='')),
                ('passport', models.FileField(blank=True, null=True, upload_to='')),
                ('tenthMarksCard', models.FileField(blank=True, null=True, upload_to='')),
                ('twelfthMarksCard', models.FileField(blank=True, null=True, upload_to='')),
                ('ugMarksSheet', models.FileField(blank=True, null=True, upload_to='')),
                ('pgMarksSheet', models.FileField(blank=True, null=True, upload_to='')),
                ('cgpaCalculator', models.FileField(blank=True, null=True, upload_to='')),
                ('validation', models.CharField(choices=[('Approved', 'Approved'), ('Pending', 'Pending'), ('Rejected', 'Rejected')], default='Pending', max_length=10)),
                ('comments', models.TextField(default='No comments')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.students')),
            ],
        ),
        migrations.CreateModel(
            name='StudentTest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('marksObtained', models.IntegerField(default=0)),
                ('passed', models.BooleanField(default=False)),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.students')),
                ('subTest', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.subtests')),
            ],
        ),
        migrations.CreateModel(
            name='Tests',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('testName', models.CharField(max_length=200)),
                ('testType', models.CharField(choices=[('Aptitude', 'Aptitude'), ('Language', 'Language'), ('Core', 'Core'), ('Programming', 'Programming'), ('Soft Skills', 'Soft Skills')], max_length=20)),
                ('maxMarks', models.FloatField(default=100)),
                ('passingMarks', models.FloatField(default=50)),
                ('batch', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.batch')),
            ],
        ),
        migrations.AddField(
            model_name='subtests',
            name='test',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.tests'),
        ),
        migrations.CreateModel(
            name='StudentSoftSkillsTestScores',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('marksObtained', models.IntegerField(default=0)),
                ('passed', models.BooleanField(default=False)),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.students')),
                ('test', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.tests')),
            ],
        ),
        migrations.CreateModel(
            name='StudentProgrammingTestScores',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subjectCode', models.CharField(blank=True, max_length=10, null=True)),
                ('specialization', models.CharField(max_length=50)),
                ('marksObtained', models.IntegerField(default=0)),
                ('passed', models.BooleanField(default=False)),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.students')),
                ('test', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.tests')),
            ],
        ),
        migrations.CreateModel(
            name='StudentLanguageTestScores',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('marksObtained', models.IntegerField(default=0)),
                ('passed', models.BooleanField(default=False)),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.students')),
                ('test', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.tests')),
            ],
        ),
        migrations.CreateModel(
            name='StudentCoreTestScores',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('marksObtained', models.IntegerField(default=0)),
                ('passed', models.BooleanField(default=False)),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.students')),
                ('test', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.tests')),
            ],
        ),
        migrations.CreateModel(
            name='StudentAptitudeTestScores',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('marksObtained', models.IntegerField(default=0)),
                ('passed', models.BooleanField(default=False)),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.students')),
                ('test', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.tests')),
            ],
        ),
    ]
